name: Check GitHub Project Status and Notify Slack

on:
  schedule:
    - cron: "0 * * * *" # 毎時実行
  workflow_dispatch: # 手動実行を許可
  push: # プッシュ時にも実行

jobs:
  check-project-status:
    runs-on: ubuntu-latest

    steps:
      - name: Repository Checkout
        uses: actions/checkout@v3

      - name: Set Variables
        id: set_vars
        run: |
          echo "CURRENT_STATUS_FILE=project_status_current.json" >> $GITHUB_ENV
          echo "CURRENT_STATUS_FILE_BASE64=project_status_current_base64.txt" >> $GITHUB_ENV
          echo "PRE_STATUS_FILE_BASE64=project_status_previous_base64.txt" >> $GITHUB_ENV

      - name: Download Previous Status (Base64 Artifact)
        id: download_artifact
        uses: actions/download-artifact@v4
        with:
          name: previous-status
          path: .
        continue-on-error: true

      - name: Fetch GitHub Project Status
        uses: octokit/graphql-action@v2.x
        id: fetch_project_status
        with:
          query: |
            query getProjects($id: ID!) {
              node(id: $id) {
                ... on ProjectV2 {
                  items(first: 100) {
                    nodes {
                      id
                      fieldValues(first: 20) {
                        nodes {
                          ... on ProjectV2ItemFieldTextValue {
                            field {
                              ... on ProjectV2FieldCommon {
                                name
                              }
                            }
                            text
                          }
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            name
                            field {
                              ... on ProjectV2FieldCommon {
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          variables: '{"id": "PVT_kwDOABiQ984AiUMh"}'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Save Current Status to File (Base64)
        run: |
          echo '${{ steps.fetch_project_status.outputs.data }}' > ${{ env.CURRENT_STATUS_FILE }}
          base64 ${{ env.CURRENT_STATUS_FILE }} > ${{ env.CURRENT_STATUS_FILE_BASE64 }}

      - name: Compare Current and Previous Status (Base64)
        id: compare_status
        env:
          CURRENT_STATUS_FILE_BASE64: ${{ env.CURRENT_STATUS_FILE_BASE64 }}
          PREVIOUS_STATUS_FILE_BASE64: ${{ env.PREVIOUS_STATUS_FILE_BASE64 }}
        run: |
          # 初回実行時のため、比較ファイルが存在しない場合の処理
          if [ ! -f "${PREVIOUS_STATUS_FILE_BASE64}" ]; then
            echo "No previous status file found. Creating baseline."
            echo "DIFF='First run - no comparison available.'" >> $GITHUB_ENV
          else
            # Base64ファイル同士を比較
            DIFF=$(diff "${PREVIOUS_STATUS_FILE_BASE64}" "${CURRENT_STATUS_FILE_BASE64}" || true)
            echo "DIFF=${DIFF}" >> $GITHUB_ENV
          fi

      - name: Notify Slack on Changes
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          # 差分がある場合のみSlackに通知
          if [[ "${DIFF}" != "" && "${DIFF}" != "First run - no comparison available." ]]; then
            echo "Change detected! Notifying Slack."
            MESSAGE="GitHub Project Status Changed:\n\`\`\`${DIFF}\`\`\`"
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\": \"$MESSAGE\"}" "$SLACK_WEBHOOK"
          else
            echo "No changes detected, or this is the first comparison."
          fi

      - name: Upload Current Status (Base64)
        uses: actions/upload-artifact@v4
        with:
          name: previous-status
          path: ${{ env.CURRENT_STATUS_FILE_BASE64 }}
          overwrite: true